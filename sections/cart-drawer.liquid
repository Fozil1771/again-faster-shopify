<aside class="cart" id="cart-drawer">
    <form id="cart-form" action="/checkout" method="post" novalidate>
        <div class="cart-head">
            <h4 class="cart-title">
                My Cart
            </h4>
            <span id="cart-close">
                {% render 'icon-close' %}
            </span>
        </div>

        <div class="cart-empty cart-none">
            <h3>Cart is empty</h3>
            <a href="/collections">Explore more products</a>
        </div>

        <div class="cart-inner ">
            <div class="cart-content">

            </div>
            <div class="cart-footer">
                <div class="cart-subtotal">
                    <span class="cart-subtotal__title">Subtotal</span>
                    <span class="cart-total-price">{{ cart.total_price | money }}</span>
                </div>
                <p class="cart-footer__text">Tax and shipping calculates at checkout.</p>
                <div class="cart-affirm">
                    {% render 'icon-affirm' %}
                    <p>pay as low as 56/mo <a href="#">Learn More</a></p>
                </div>
                <button class="btn-primary">Continue to
                    Checkout</button>
            </div>
        </div>

    </form>
</aside>


<script>
    let cartInner = document.querySelector('.cart-inner')
    let cartContainer = document.querySelector('.cart-content')
    let cartEmpty = document.querySelector('.cart-empty')


    function getProducts() {


        fetch(window.Shopify.routes.root + 'cart.js')
            .then(response => {

                return response.json()
            })
            .then(products => {


                if (products.item_count != 0) {

                    cartInner.classList.remove('cart-none')
                    cartEmpty.classList.add('cart-none')

                    cartContainer.innerHTML = '';

                    document.querySelector(".cart-total-price").textContent = '$' + (products.items_subtotal_price / 100).toFixed(2)

                    products.items.forEach(product => {
                        console.log('product: ', product)
                        cartContainer.insertAdjacentHTML('beforeend',
                            `
                        <div class="cart-item" >
                            
                            <div class="cart-item__img">
                                <img src="${product.image}" alt="${product.handle}" />    
                            </div>
                            <div class="cart-item__content">
                                <div class="cart-item__info">
                                    <h2>${product.product_title}</h2>
                                    <span>${product.variant_title ?? product.product_type}</span>
                                </div>
                                <div class="cart-item__count">
                                    <button class="count-btn count-decrement" type="button" data-key=${product.key} type="button">{% render 'icon-minus' %}</button>
                                    <span class="counter" type="button" data-counter=${product.quantity}>${product.quantity}</span>
                                    <button class="count-btn count-increment" type="button" data-key=${product.key} type="button">{% render 'icon-plus' %}</button>
                                </div>
                            </div>
                            <div class="cart-item__price">
                                <span>$${product.price ? (product.price / 100).toFixed(2) : (product.properties._original_bundle_price / 100).toFixed(2)}</span>
                                <button class="cart-item__remove" type="button" data-key=${product.key}>{% render 'icon-remove' %}</button>
                            </div>
                        </div>
                        `
                        )
                    });
                } else {
                    cartInner.classList.add('cart-none')
                    cartEmpty.classList.remove('cart-none')
                }

            })
            .catch((error) => {
                console.error('Error:', error);
            });
    }

    let cartBtn = document.getElementById('cart-btn')
    let cartDrawer = document.getElementById('cart-drawer')
    let cartBody = document.querySelector('#cart-form')
    let cartClose = document.getElementById('cart-close')



    cartBtn.addEventListener('click', (e) => {
        e.preventDefault()
        cartBody.style.right = 0 + '%'
        cartDrawer.classList.add('cart-open')

        getProducts()


    })

    cartClose.addEventListener('click', () => {
        cartBody.style.right = -100 + '%'
        cartDrawer.classList.remove('cart-open')
    })



    document.querySelector('.cart-content').addEventListener("click", e => {
        console.log("target: ", e.target)

        if (e.target.parentElement.classList.contains("cart-item__remove")) {
            let target = e.target.parentElement;
            let formData = {
                "id": e.target.parentElement.getAttribute("data-key"),
                "quantity": 0
            };
            target.parentElement.parentElement.remove()

            fetch(window.Shopify.routes.root + 'cart/change.js', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(formData)
            })
                .then(res => {
                    res.json().then((items) => {
                        document.querySelector(".cart-total-price").textContent = '$' + (items.items_subtotal_price / 100).toFixed(2)

                        if (items.item_count == 0) {
                            cartInner.classList.add('cart-none')
                            cartEmpty.classList.remove('cart-none')
                        }
                    })
                })
                .catch((error) => {
                    console.error('Error:', error);
                });




        }

        if (e.target.parentElement.classList.contains("count-increment")) {
            let target = e.target.parentElement;
            let quantity = target.previousElementSibling;
            console.log("target quantity: ", quantity)

            quantity.textContent = Number(quantity.textContent) + 1;
            let formData = {
                "id": target.getAttribute("data-key"),
                "quantity": quantity.textContent
            };
            console.log('incremented', formData)

            fetchChange(formData, quantity, target)
        }

        if (e.target.parentElement.classList.contains("count-decrement")) {
            let target = e.target.parentElement;
            let quantity = target.nextElementSibling;
            console.log("target quantity: ", quantity)
            if (Number(quantity.textContent) > 1)
                quantity.textContent = Number(quantity.textContent) - 1;

            let formData = {
                "id": target.getAttribute("data-key"),
                "quantity": quantity.textContent
            };
            console.log('decrement', formData)

            fetchChange(formData, quantity, target)
        }
    })




    function fetchChange(data, quantity, target) {
        fetch(window.Shopify.routes.root + 'cart/change.js', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        })
            .then(res => {
                console.log('cart response', res)
                res.json().then((changed) => {

                    let currentQty = changed.items.find(item => item.key === data.id)

                    if (currentQty.quantity < Number(quantity.textContent)) {
                        target.parentElement.disabled = true
                    } else {
                        target.parentElement.disabled = false
                    }
                    document.querySelector(".cart-total-price").textContent = '$' + (changed.items_subtotal_price / 100).toFixed(2)
                })
            })
            .catch((error) => {
                console.error('Error:', error);
            });
    }

    // //// //


</script>